{
    "ServletRequest Interface - Methods to provide client request information to a servlet ": {
        "prefix": "iservletreq",
        "body": [
          "import jakarta.servlet.ServletResponse;",
          "import jakarta.servlet.ServletRequest;",
          "import jakarta.servlet.ServletContext;",
          "import jakarta.servlet.ServletInputStream;",
          "import jakarta.servlet.RequestDispatcher;",
          "import jakarta.servlet.AsyncContext;",
          "import jakarta.servlet.DispatcherType;",
          "import java.lang.IllegalStateException;",
          "import java.lang.Object;",
          "import java.lang.String;",
          "import java.util.*;",
          "import java.io.UnsupportedEncodingException;",
          "import java.io.IOException;",
          "import java.io.BufferedReader;",
          "import java.io.Reader;",
          "import java.util.Locale;",
          "",
          "public class ${1:className} implements ServletRequest {",
          "\tpublic Object getAttribute(String name) {",
          "\t\t//Returns an Object containing the value of the attribute, or null if the attribute does not exist",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getAttributeNames() {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getCharacterEncoding() {",
          "\t\t//Returns the name of the character encoding used in the body of this request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic void setCharacterEncoding(String env) throws UnsupportedEncodingException {",
          "\t\t//Overrides the name of the character encoding used in the body of this request. This method must be called prior to reading request parameters or reading input using getReader(). Otherwise, it has no effect.",
          "\t}",
          "",
          "\tpublic int getContentLength() {",
          "\t\t//Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known or is greater than Integer.MAX_VALUE. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.",
          "\t\treturn -1;",
          "\t}",
          "",
          "\tpublic long getContentLengthLong() {",
          "\t\t//Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known or is greater than Integer.MAX_VALUE. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.",
          "\t\treturn -1;",
          "\t}",
          "",
          "\tpublic String getContentType() {",
          "\t\t//Returns the MIME type of the body of the request, or null if the type is not known. For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic ServletInputStream getInputStream() throws IOException {",
          "\t\t//Retrieves the body of the request as binary data using a ServletInputStream. Either this method or getReader() may be called to read the body, not both.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getParameter(String name) {",
          "\t\t//Returns the value of a request parameter as a String, or null if the parameter does not exist. Request parameters are extra information sent with the request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String[] getParameterValues(String name) {",
          "\t\t//Returns an array of String objects containing all of the values the given request parameter has, or null if the parameter does not exist.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getProtocol() {",
          "\t\t//Returns the name and version of the protocol the request uses in the form protocol/majorVersion.minorVersion, for example, HTTP/1.1. ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getScheme() {",
          "\t\t//Returns the name of the scheme used to make this request, for example, http, https, or ftp. Different schemes have different rules for constructing URLs, as noted in RFC 1738.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getServerName() {",
          "\t\t//Returns the host name of the server to which the request was sent. It is the value of the part before \":\" in the Host header value, if any, or the resolved server name, or the server IP address.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getServerPort() {",
          "\t\t//Returns the port number to which the request was sent. It is the value of the part after \":\" in the Host header value, if any, or the server port where the client connection was accepted on.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic BufferedReader getReader() throws IOException {",
          "\t\t//Retrieves the body of the request as character data using a BufferedReader. The reader translates the character data according to the character encoding used on the body. Either this method or getInputStream() may be called to read the body, not both.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRemoteAddr() {",
          "\t\t//Returns the Internet Protocol (IP) address of the client or last proxy that sent the request. For HTTP servlets, same as the value of the CGI variable REMOTE_ADDR.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRemoteHost() {",
          "\t\t//Returns the fully qualified name of the client or the last proxy that sent the request. ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic void setAttribute(String name, Object o) {",
          "\t\t//Stores an attribute in this request. Attributes are reset between requests. This method is most often used in conjunction with RequestDispatcher.",
          "\t}",
          "",
          "\tpublic void removeAttribute(String name){",
          "\t\t//Removes an attribute from this request. This method is not generally needed as attributes only persist as long as the request is being handled.",
          "\t}",
          "",
          "\tpublic Locale getLocale() {",
          "\t\t//Returns the preferred Locale that the client will accept content in, based on the Accept-Language header. If the client request doesn't provide an Accept-Language header, this method returns the default locale for the server.",
          "\t\tLocale locale = new Locale(\"\");",
          "\t\t return locale;",
          "\t}",
          "",
          "\tpublic Enumeration<Locale> getLocales() {",
          "\t\t//Returns an Enumeration of Locale objects indicating, in decreasing order starting with the preferred locale, the locales that are acceptable to the client based on the Accept-Language header. If the client request doesn't provide an Accept-Language header, this method returns an Enumeration containing one Locale, the default locale for the server.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isSecure() {",
          "\t\t//Returns a boolean indicating whether this request was made using a secure channel, such as HTTPS.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic RequestDispatcher getRequestDipatcher(String path) {",
          "\t\t//Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path. ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRealPath(String path){",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getRemotePort() {",
          "\t\t//Returns the Internet Protocol (IP) source port of the client or last proxy that sent the request.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic String getLocalName() {",
          "\t\t//Returns the host name of the Internet Protocol (IP) interface on which the request was received.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getLocalAddr() {",
          "\t\t//Returns the Internet Protocol (IP) address of the interface on which the request was received.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getLocalPort() {",
          "\t\t//Returns the Internet Protocol (IP) port number of the interface on which the request was received.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic ServletContext getServletContext() {",
          "\t\t//Gets the servlet context to which this ServletRequest was last dispatched.",
          "\t\t// NOTE: No context currently returned",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic AsyncContext startAsync() throws IllegalStateException {",
          "\t\t//Puts this request into asynchronous mode, and initializes its AsyncContext with the original (unwrapped) ServletRequest and ServletResponse objects.",
          "\t\t//NOTE: No Async Context currently returned",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isAsyncStarted() {",
          "\t\t//Checks if this request supports asynchronous operation.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic AsyncContext getAsyncContext() {",
          "\t\t//Gets the AsyncContext that was created or reinitialized by the most recent invocation of startAsync() or startAsync(ServletRequest,ServletResponse) on this request.",
          "\t\t//NOTE: Async context not being returned currently ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic DispatcherType getDispatcherType() {",
          "\t\t//Gets the dispatcher type of this request.",
          "\t\t//NOTE: currently not returning a dispatcher type",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isAsyncSupported() {",
          "\t\t//Gets the dispatcher type of this request.",
          "\t\t//NOTE: currently not returning a dispatcher type",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic AsyncContext startAsync(ServletRequest req, ServletResponse res) {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic RequestDispatcher getRequestDispatcher(String s) {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Map<String, String[]> getParameterMap() {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getParameterNames() {",
          "\t\treturn null;",
          "\t}",
          "}"
        ],
        "description": "ServletRequest Interface - Methods to provide client request information to a servlet "
      },
      "Custom class implementing HttpServletRequest interface - The servlet container creates an HttpServletRequest object and passes it as an argument to the servlet's service methods (doGet, doPost, etc).": {
        "prefix": "customhttpservletreq",
        "body": [
          "import jakarta.servlet.ServletResponse;",
          "import jakarta.servlet.ServletRequest;",
          "import jakarta.servlet.ServletContext;",
          "import jakarta.servlet.ServletInputStream;",
          "import jakarta.servlet.RequestDispatcher;",
          "import jakarta.servlet.http.HttpServletRequest;",
          "import jakarta.servlet.http.HttpServletResponse;",
          "import jakarta.servlet.http.HttpServletMapping;",
          "import jakarta.servlet.http.HttpSession;",
          "import jakarta.servlet.DispatcherType;",
          "import jakarta.servlet.AsyncContext;",
          "import jakarta.servlet.http.HttpUpgradeHandler;",
          "import jakarta.servlet.http.MappingMatch;",
          "import jakarta.servlet.ServletException;",
          "import java.io.UnsupportedEncodingException;",
          "import java.io.BufferedReader;",
          "import java.io.IOException;",
          "import jakarta.servlet.http.PushBuilder;",
          "import jakarta.servlet.http.Cookie;",
          "import jakarta.servlet.http.Part;",
          "import java.lang.StringBuffer;",
          "import java.lang.String;",
          "import java.security.Principal;",
          "import java.util.*;",
          "",
          "public class ${1:className} implements HttpServletRequest {",
          "\tpublic static final String BASIC_AUTH = \"BASIC\";",
          "\tpublic static final String FORM_AUTH = \"FORM\";",
          "\tpublic static final String CLIENT_CERT_AUTH = \"CLIENT_CERT\";",
          "\tpublic static final String DIGEST_AUTH = \"DIGEST\";",
          "",
          "\tpublic boolean authenticate(HttpServletResponse response) throws IOException,ServletException{",
          "\t\t//Use the container login mechanism configured for the ServletContext to authenticate the user making this request.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic String changeSessionId() {",
          "\t\t//Change the session id of the current session associated with this request and return the new session id.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getAuthType() {",
          "\t\t//Returns the name of the authentication scheme used to protect the servlet.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getContextPath() {",
          "\t\t//Returns the portion of the request URI that indicates the context of the request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Cookie[] getCookies() {",
          "\t\t//Returns an array containing all of the Cookie objects the client sent with this request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic long getDateHeader(String name){",
          "\t\t//Returns the value of the specified request header as a long value that represents a Date object.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic String getHeader(String name) {",
          "\t\t//Returns the value of the specified request header as a String.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getHeaderNames(){",
          "\t\t//Returns an enumeration of all the header names this request contains.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getHeaders(String name) {",
          "\t\t//Returns all the values of the specified request header as an Enumeration of String objects.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getIntHeader(String name) {",
          "\t\t//Returns the value of the specified request header as an int.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic String getMethod() {",
          "\t\t//Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Part getPart(String name) {",
          "\t\t//Gets the Part with the given name.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Collection<Part> getParts() {",
          "\t\t//Gets all the Part components of this request, provided that it is of type multipart/form-data.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getPathInfo() {",
          "\t\t//Returns any extra path information associated with the URL the client sent when it made this request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getPathTranslated() {",
          "\t\t//Returns any extra path information after the servlet name but before the query string, and translates it to a real path.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getQueryString() {",
          "\t\t//Returns the query string that is contained in the request URL after the path.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRemoteUser() {",
          "\t\t//Returns the login of the user making this request, if the user has been authenticated, or null if the user has not been authenticated.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRequestedSessionId() {",
          "\t\t//Returns the session ID specified by the client.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRequestURI() {",
          "\t\t//Returns the part of this request's URL from the protocol name up to the query string in the first line of the HTTP request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic StringBuffer getRequestURL() {",
          "\t\t//Reconstructs the URL the client used to make the request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getServletPath() {",
          "\t\t//Returns the part of this request's URL that calls the servlet.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic HttpSession getSession() {",
          "\t\t//Returns the current session associated with this request, or if the request does not have a session, creates one.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic HttpSession getSession(boolean create) {",
          "\t\t//Returns the current HttpSession associated with this request or, if there is no current session and create is true, returns a new session.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Principal getUserPrincipal() {",
          "\t\t//Returns a java.security.Principal object containing the name of the current authenticated user.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isRequestedSessionIdFromCookie() {",
          "\t\t//Checks whether the requested session ID was conveyed to the server as an HTTP cookie.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic boolean isRequestedSessionIdFromURL() {",
          "\t\t//Checks whether the requested session ID was conveyed to the server as part of the request URL.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic boolean isRequestedSessionIdValid() {",
          "\t\t//Checks whether the requested session ID is still valid.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic boolean isUserInRole(String role) {",
          "\t\t//Returns a boolean indicating whether the authenticated user is included in the specified logical \"role\".",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic void login(String username, String password) {",
          "\t\t//Validate the provided username and password in the password validation realm used by the web container login mechanism configured for the ServletContext.",
          "\t}",
          "",
          "\tpublic void logout() {",
          "\t\t//Establish null as the value returned when getUserPrincipal, getRemoteUser, and getAuthType is called on the request.",
          "\t}",
          "",
          "\tpublic <T extends HttpUpgradeHandler> T  upgrade(Class<T> handlerClass) throws IOException, ServletException {",
          "\t\t//Creates an instance of HttpUpgradeHandler for a given class and uses it for the http protocol upgrade processing.",
          "\t\t//Note: Not implemented",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isRequestedSessionIdFromUrl() {",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic DispatcherType getDispatcherType() {",
          "\t\t//Gets the dispatcher type of this request.",
          "\t\t//NOTE: currently not returning a dispatcher type",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic AsyncContext getAsyncContext() {",
          "\t\t//Gets the AsyncContext that was created or reinitialized by the most recent invocation of startAsync() or startAsync(ServletRequest,ServletResponse) on this request.",
          "\t\t//NOTE: Async context not being returned currently ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isAsyncSupported() {",
          "\t\t//Gets the dispatcher type of this request.",
          "\t\t//NOTE: currently not returning a dispatcher type",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic boolean isAsyncStarted() {",
          "\t\t//Checks if this request supports asynchronous operation.",
          "\t\treturn false;",
          "\t}",
          "",
          "\tpublic AsyncContext startAsync(ServletRequest req, ServletResponse res) {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic AsyncContext startAsync() {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic ServletContext getServletContext() {",
          "\t\t//Gets the servlet context to which this ServletRequest was last dispatched.",
          "\t\t// NOTE: No context currently returned",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRealPath(String path){",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getRemotePort() {",
          "\t\t//Returns the Internet Protocol (IP) source port of the client or last proxy that sent the request.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic String getLocalName() {",
          "\t\t//Returns the host name of the Internet Protocol (IP) interface on which the request was received.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getLocalAddr() {",
          "\t\t//Returns the Internet Protocol (IP) address of the interface on which the request was received.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getLocalPort() {",
          "\t\t//Returns the Internet Protocol (IP) port number of the interface on which the request was received.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic RequestDispatcher getRequestDispatcher(String s) {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic RequestDispatcher getRequestDipatcher(String path) {",
          "\t\t//Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path. ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic void setAttribute(String name, Object o) {",
          "\t\t//Stores an attribute in this request. Attributes are reset between requests. This method is most often used in conjunction with RequestDispatcher.",
          "\t}",
          "",
          "\tpublic void removeAttribute(String name){",
          "\t\t//Removes an attribute from this request. This method is not generally needed as attributes only persist as long as the request is being handled.",
          "\t}",
          "",
          "\tpublic Locale getLocale() {",
          "\t\t//Returns the preferred Locale that the client will accept content in, based on the Accept-Language header. If the client request doesn't provide an Accept-Language header, this method returns the default locale for the server.",
          "\t\tLocale locale = new Locale(\"\");",
          "\t\t return locale;",
          "\t}",
          "",
          "\tpublic Enumeration<Locale> getLocales() {",
          "\t\t//Returns an Enumeration of Locale objects indicating, in decreasing order starting with the preferred locale, the locales that are acceptable to the client based on the Accept-Language header. If the client request doesn't provide an Accept-Language header, this method returns an Enumeration containing one Locale, the default locale for the server.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic boolean isSecure() {",
          "\t\t//Returns a boolean indicating whether this request was made using a secure channel, such as HTTPS.",
          "\t\treturn false;",
          "\t}",
          "\tpublic String getServerName() {",
          "\t\t//Returns the host name of the server to which the request was sent. It is the value of the part before \":\" in the Host header value, if any, or the resolved server name, or the server IP address.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic int getServerPort() {",
          "\t\t//Returns the port number to which the request was sent. It is the value of the part after \":\" in the Host header value, if any, or the server port where the client connection was accepted on.",
          "\t\treturn 1;",
          "\t}",
          "",
          "\tpublic BufferedReader getReader() throws IOException {",
          "\t\t//Retrieves the body of the request as character data using a BufferedReader. The reader translates the character data according to the character encoding used on the body. Either this method or getInputStream() may be called to read the body, not both.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRemoteAddr() {",
          "\t\t//Returns the Internet Protocol (IP) address of the client or last proxy that sent the request. For HTTP servlets, same as the value of the CGI variable REMOTE_ADDR.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getRemoteHost() {",
          "\t\t//Returns the fully qualified name of the client or the last proxy that sent the request. ",
          "\t\treturn null;",
          "\t}",
          "\tpublic String getParameter(String name) {",
          "\t\t//Returns the value of a request parameter as a String, or null if the parameter does not exist. Request parameters are extra information sent with the request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String[] getParameterValues(String name) {",
          "\t\t//Returns an array of String objects containing all of the values the given request parameter has, or null if the parameter does not exist.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getProtocol() {",
          "\t\t//Returns the name and version of the protocol the request uses in the form protocol/majorVersion.minorVersion, for example, HTTP/1.1. ",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getScheme() {",
          "\t\t//Returns the name of the scheme used to make this request, for example, http, https, or ftp. Different schemes have different rules for constructing URLs, as noted in RFC 1738.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Map<String, String[]> getParameterMap() {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getParameterNames() {",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic String getCharacterEncoding() {",
          "\t\t//Returns the name of the character encoding used in the body of this request.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic void setCharacterEncoding(String env) throws UnsupportedEncodingException {",
          "\t\t//Overrides the name of the character encoding used in the body of this request. This method must be called prior to reading request parameters or reading input using getReader(). Otherwise, it has no effect.",
          "\t}",
          "",
          "\tpublic int getContentLength() {",
          "\t\t//Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known or is greater than Integer.MAX_VALUE. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.",
          "\t\treturn -1;",
          "\t}",
          "",
          "\tpublic long getContentLengthLong() {",
          "\t\t//Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known or is greater than Integer.MAX_VALUE. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.",
          "\t\treturn -1;",
          "\t}",
          "",
          "\tpublic String getContentType() {",
          "\t\t//Returns the MIME type of the body of the request, or null if the type is not known. For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic ServletInputStream getInputStream() throws IOException {",
          "\t\t//Retrieves the body of the request as binary data using a ServletInputStream. Either this method or getReader() may be called to read the body, not both.",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Object getAttribute(String name) {",
          "\t\t//Returns an Object containing the value of the attribute, or null if the attribute does not exist",
          "\t\treturn null;",
          "\t}",
          "",
          "\tpublic Enumeration<String> getAttributeNames() {",
          "\t\treturn null;",
          "\t}",
          "}"
        ],
        "description": "Custom class implementing HttpServletRequest interface - The servlet container creates an HttpServletRequest object and passes it as an argument to the servlet's service methods (doGet, doPost, etc)."
      }
}
